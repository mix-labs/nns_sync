type AccountBalanceArgs = record { account : text };
type ArchiveOptions = record {
  num_blocks_to_archive : nat64;
  trigger_threshold : nat64;
  max_message_size_bytes : opt nat64;
  node_max_memory_size_bytes : opt nat64;
  controller_id : principal;
};
type BinaryAccountBalanceArgs = record { account : vec nat8 };
type Duration = record { secs : nat64; nanos : nat32 };
type LedgerCanisterInitPayload = record {
  send_whitelist : vec principal;
  minting_account : text;
  transaction_window : opt Duration;
  max_message_size_bytes : opt nat64;
  archive_options : opt ArchiveOptions;
  initial_values : vec record { text; Tokens };
};
type Result = variant { Ok : nat64; Err : TransferError };
type SendArgs = record {
  to : text;
  fee : Tokens;
  memo : nat64;
  from_subaccount : opt vec nat8;
  created_at_time : opt TimeStamp;
  amount : Tokens;
};
type TimeStamp = record { timestamp_nanos : nat64 };
type Tokens = record { e8s : nat64 };
type TransferArgs = record {
  to : vec nat8;
  fee : Tokens;
  memo : nat64;
  from_subaccount : opt vec nat8;
  created_at_time : opt TimeStamp;
  amount : Tokens;
};
type TransferError = variant {
  TxTooOld : record { allowed_window_nanos : nat64 };
  BadFee : record { expected_fee : Tokens };
  TxDuplicate : record { duplicate_of : nat64 };
  TxCreatedInFuture;
  InsufficientFunds : record { balance : Tokens };
};
service : (LedgerCanisterInitPayload) -> {
  account_balance : (BinaryAccountBalanceArgs) -> (Tokens) query;
  account_balance_dfx : (AccountBalanceArgs) -> (Tokens) query;
  send_dfx : (SendArgs) -> (nat64);
  transfer : (TransferArgs) -> (Result);
}